* Com2.e computer science project
** Overview
   - The project allows you to increase your final grade by a maximum
     of 3 grades (maximum level 3 in grading levels below)
   - Your program must process text data in a meaningful way, but you
     should not strive for a real-world application.
   - Grading is based on
     - specification
     - correctness
     - code clarity
     - used data structures
     - algorithms.
   - An example is provided for you below.
     - The example is relatively complicated. For example, it utilizes
       a combination of binary and linear search to find animals whose
       species starts with a given key. Because there is so little
       data, linear search would have been sufficient.

** Project deadline
   The dealine of the project is <2022-11-20 Sun 23:59>.

** Project submission
   - Your submission consists of
     1. one *PDF file* containing documentation
        1. your target grade level (1, 2 or 3)
        2. specification
        3. test case with typical input
     2. one ~.java~-file containing the code
     3. possibly one or more text data files needed for the test case.
   - Submission is made via email by providing either
     - one ~.zip~-archive containing all files, or
     - a link to a GitHub repository containing all files.
   - It is strongly suggested that you use documentation structure
     similar to the example below, as this will make both your and my
     life a lot easier.
   
** Grading levels
*** Criteria for level 1
**** Specification
     - There is a sensible description of what the program does.
     - The program reads input from the user and/or from text data
       file(s) and performs a meaningful operation.
     - Format of input is explained clearly.
     - The input contains multiple items of data (multiple numbers, or
       multiple lines of text, or similar).
     - At least some of the data is read from the user or from a file
       using a loop (~while~, ~for~).
       - Note: There are /many/ ways to do this. Read multiple lines
         from a file. Repeat the same operation multiple times for the
         user. Read multiple lines from user input.
**** Correctness
     - The program works correctly in one documented test case with
       typical input.
     - If any text data files are required to test this, they are
       supplied.
**** Code clarity
     - Code is indented correctly.
     - There is no unnecessary whitespace (no extra empty lines or
       extra spaces).
     - Identifiers (names of variables, constants and functions) are
       meaningful in the context of the program.
*** Additional criteria for level 2
**** Non-trivial algorithms
     Program includes at least one non-trivial algorithm. This could
     be searching or sorting or something else.
**** Arrays
     Program uses an array in a meaningful way.
**** Code clarity
     - All non-trivial parts of the code are
       commented. \ldquo{}Non-trivial\rdquo is defined by assuming
       that the reader is a fellow student.
     - The flow of the program is split into meaningful functions
       called by ~main()~.
     - The role of defined functions is explained in comments.
*** Additional criteria for level 3
**** Dynamic data structures
     Program uses a list (or other dynamic data structure).
**** Classes
     Program includes at least one programmer-defined class.
** Example project
*** Documentation
**** Target assessment level
     Target assessment level of this work is 3.
**** Specification
***** What does the program do?
      The program
      1. reads data about animals from a file
      2. allows user to search for animals based on its species; for
         each given key (single word), the program prints all those
         animals whose species start with the key.
***** Data format
****** Data file
       The input data text file consists of lines, each line
       containing
       #+begin_center
       =category weight species=
       #+end_center
       =category= is a single word, =weight= is an integer, and
       =species= is the rest of the line.
****** User input
       User input consists of either =!= (terminates program), or a
       string =key= which is used to find animals whose species starts
       with =key=.
**** Correctness
***** Typical test case
      File [[file:animals.txt]] contains data from 4 animals. The
      following is a script obtained when running the program

      #+begin_example
      Please give search key (! to quit): s
      salmon (fish) 13
      sea turtle (reptile) 900
      Please give search key (! to quit): sea
      sea turtle (reptile) 900
      Please give search key (! to quit): seat
      <key not found>
      Please give search key (! to quit): a
      albatross (bird) 7
      Please give search key (! to quit): b
      blue whale (mammal) 1600
      Please give search key (! to quit): x
      <key not found>
      Please give search key (! to quit): !
      #+end_example
**** Non-trivial algorithms
***** Selection sort
      Data is sorted in lexicographic order according to species name
      using selection sort.
***** Searching 
      Animals whose species starts with given key are search for using
      a combination of binary search (for one value) and then a form
      of linear search to extend to all animals matching the key
      around the point where the first match was found.
**** Arrays
     Animals are stored into array for sorting and binary search.
**** Dynamic data structures
     - Lists are used read an unspecified amount of data from the user.
     - Lists are also used to return an unspecified number of search results.
**** Classes
     A class is used to store the data of each animal.
*** Program code (provided here just for ease of reading, would be a separate file in your submission)
    #+begin_src java :exports code :tangle Main.java
      import java.io.File;
      import java.util.Scanner;
      import java.util.ArrayList;

      public class Main
      {
        public static void main (String[] args) throws Exception
        {
          // read animals from file
          final String filename = "animals.txt";
          Animal[] animals = readAnimals (filename);

          // sort into increasing lexicographic order according to species
          sortAnimals (animals);

          // search for animals whose species starts with given key; quit
          // with input !
          Scanner scanner = new Scanner (System.in);
          boolean quit = false;
          while (!quit)
          {
            System.out.print ("Please give search key (! to quit): ");
            String key = scanner.next ();
            if (key.equals ("!"))
              quit = true;
            else
            {
              ArrayList<Animal> animalList = searchAnimals (animals, key);
              if (animalList.isEmpty ())
                System.out.println ("<key not found>");
              else
                for (int i = 0; i < animalList.size (); i++)
                  System.out.println (animalList.get (i));
            }
          }
        }

        // read animals from given file name, return array of animals
        static Animal[] readAnimals (String filename) throws Exception
        {
          // open file and create a scanner for it
          Scanner scanner = new Scanner (new File (filename));

          // first store animals into list, since we do not know how many
          // there are
          ArrayList<Animal> animalList = new ArrayList<> ();

          // read while there are lines in the file
          while (scanner.hasNextLine ())
          {
            // each line has category, weight, species
            String category = scanner.next ();
            int weight = scanner.nextInt ();

            // species is the rest of the line, with possible leading and
            // trailing whitespace trimmed
            String species = scanner.nextLine ().trim (); 

            animalList.add (new Animal (species, category, weight));
          }

          // store animals into returned array
          int numAnimals = animalList.size ();
          Animal[] animals = new Animal [numAnimals];
          for (int i = 0; i < numAnimals; i++)
            animals [i] = animalList.get (i);

          return animals;
        }

        // sort animals according to species into lexicographic order
        static void sortAnimals (Animal[] animals)
        {
          // selection sort according to species name
          for (int i = 0; i < animals.length - 1; i++)
          {
            int smallestInd = i;
            for (int j = i + 1; j < animals.length; j++)
              if (animals [smallestInd].species.compareTo (animals [j].species) > 0)
                smallestInd = j;

            // swap if smallest found is not at index i
            if (smallestInd != i)
            {
              Animal tmp = animals [i];
              animals [i] = animals [smallestInd];
              animals [smallestInd] = tmp;
            }
          }
        }

        // return a list of animals whose species start with key
        static ArrayList<Animal> searchAnimals (Animal[] animals, String key)
        {
          // binary search for one animal matching key
          int lo = 0, hi = animals.length - 1;
          int foundInd = -1; // index of found animal, negative if none found

          while (lo <= hi)
          {
            int mid = (lo + hi) / 2;
            Animal a = animals [mid];
            if (a.species.startsWith (key))
            {
              foundInd = mid;;
              break;
            }
            else if (a.species.compareTo (key) > 0)
              hi = mid - 1;
            else
              lo = mid + 1;
          }

          ArrayList<Animal> animalList = new ArrayList<> ();
          if (foundInd >= 0)
          {
            // backtrack to first animal matching key
            while (foundInd > 0 && animals [foundInd - 1].species.startsWith (key))
              foundInd--;

            // add all animals matching key
            while (foundInd < animals.length && animals [foundInd].species.startsWith (key))
            {
              animalList.add (animals [foundInd]);
              foundInd++;
            }
          }

          return animalList;
        }
      }


      class Animal
      {
        public Animal (String species, String category, int weight)
        {
          this.species = species;
          this.category = category;
          this.weight = weight;
        }

        public String toString ()
        {
          return species + " (" + category + ") " + weight;
        }

        public String species, category;
        public int weight;
      }
    #+end_src
